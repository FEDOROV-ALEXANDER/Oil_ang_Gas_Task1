import numpy as np
from Solve import solve_for_one_well
import matplotlib.pyplot as plt
import seaborn as sns


# Ввод входных значений
length, width = 15000, 15000  # [м] геометрические размеры рассчитываемой области
dx, dy = 100, 100  # [м] шаг по направлениям
Nx, Ny = int(length / dx) + 1, int(width / dy) + 1 # количество элементов
X = np.linspace(0, length, Nx)
Y = np.linspace(0, width, Ny)
T = 365


# координаты скважины
x_w = 3000
y_w = 3000
r_w = 1.5
# пока будет одна скважина, нагнетательная
q_injection = 10  # [м3/сут] дебит нагнетательных скважин

B = 5  # Объемный коэффициент
h = 20  # толщина пласта


# TODO надо разобраться с тензором проницаемости. Пока задаю одинаковым во всех направлениях для каждого объема
# То есть это будет скаляр. Потом надо будет сделать 2 области с разным коэффициентами, после уже задавать тензор в каждом объеме

permeability = 1  # [мД] проницаемость - скаляр
permeability_field = np.full((Nx, Ny), permeability)  # проницаемость по расчетной области

# параметры взяты плюс-минус от балды
viscosity = 1  # Вязкость [сПз] = 10e-3 [Па * с]
compressibility = 5 * 10e-9  # [1/Па] сжимаемость
coef = - B * viscosity/ 2 / np.pi / permeability / h # вспомогательный коэффициент
dt = 1  # шаг по времени в сутках

eta = 1.0
pressure_start = np.full((Nx, Ny), 0)
pressure_start[0, :] = 0
pressure_start[-1, :] = 0
pressure_start[:, 0] = 0
pressure_start[:, -1] = 0

pressure, pressure_w = solve_for_one_well(X, Y, x_w, y_w,q_injection, r_w, coef, pressure_start.copy(), T, dt, eta)
# Начальные и граничные условия: давление нулевое, пласт бесконечный -> давление на границах 0
# TODO разобраться, какое значение брать у потенциала Ф, на 117 странице Лэйка1_B он взят постоянным, но хз насколько так можно, потому что он определяется как разность давления жидкости и градиента давления под действием силы тяжести
# Сначала сделаю явную схему интегрирования, потому что как то не доходит прикол решения методом прогонки: единственное что смог найти это про построение 5 диагональной матрицы


# Визуализация распределения давления
plt.figure(figsize=(8, 6))
plt.pcolormesh(X, Y, pressure, shading='auto', cmap='viridis')
plt.colorbar(label='Давление')
plt.title(f'Распределение давления через {T} дней')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()